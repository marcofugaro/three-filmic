{"version":3,"file":"three-filmic.modern.js","sources":["../src/constants.ts","../src/effects/AllocationTransform.ts","../src/effects/ExposureTransform.ts","../src/effects/MatrixTransform.ts","../src/effects/DebugEffect.ts","../src/FilmicPass.ts"],"sourcesContent":["import { LookupTexture } from 'postprocessing';\nimport {\n\tClampToEdgeWrapping,\n\tDataTexture,\n\tFloatType,\n\tLinearFilter,\n\tMaterial,\n\tRedFormat,\n\tUVMapping,\n} from 'three';\n\nexport type $TODO = any;\n\nexport enum View {\n\tNONE = 5000,\n\tFILMIC = 5001,\n\tFILMIC_LOG = 5002,\n\tFALSE_COLOR = 5003,\n\tGRAYSCALE = 5004,\n}\n\nexport enum Look {\n\tNONE = 5100,\n\tVERY_HIGH_CONTRAST = 5101,\n\tHIGH_CONTRAST = 5102,\n\tMEDIUM_HIGH_CONTRAST = 5103,\n\tMEDIUM_CONTRAST = 5100,\n\tMEDIUM_LOW_CONTRAST = 5104,\n\tLOW_CONTRAST = 5105,\n\tVERY_LOW_CONTRAST = 5106,\n}\n\nexport enum Allocation {\n\tUNIFORM = 5200,\n\tLG2 = 5201,\n}\n\nexport const DEFAULT_VIEW = View.FILMIC;\nexport const DEFAULT_EXPOSURE = 0;\n\nexport enum Defines {\n\tALLOCATION = 'FILMIC_ALLOCATION',\n\tINVERSE = 'FILMIC_INVERSE',\n}\n\nexport enum Uniforms {\n\tEXPOSURE = 'exposure',\n\tMATRIX = 'matrix',\n\tLUT = 'lut',\n\tDOMAIN = 'domain',\n\tRANGE = 'range',\n}\n\nexport const NEUTRAL_LUT_1D = new DataTexture(\n\tnew Float32Array([0, 0.25, 0.5, 0.75, 1]),\n\t5,\n\t1,\n\tRedFormat,\n\tFloatType,\n\tUVMapping,\n\tClampToEdgeWrapping,\n\tClampToEdgeWrapping,\n\tLinearFilter,\n\tLinearFilter\n);\nNEUTRAL_LUT_1D.name = 'neutral1D';\nNEUTRAL_LUT_1D.needsUpdate = true;\n\nexport const NEUTRAL_LUT_3D = LookupTexture.createNeutral(8);\nNEUTRAL_LUT_3D.name = 'neutral3D';\n\nexport interface FullscreenMaterial extends Material {\n\tencodeOutput: boolean;\n}\n","import { BlendFunction, Effect } from 'postprocessing';\nimport { Uniform, Vector2 } from 'three';\nimport { Allocation, Defines, Uniforms } from '../constants';\n\ninterface AllocationOptions {\n\tallocation: Allocation;\n\tdomain: Vector2;\n\trange: Vector2;\n\tinverse: boolean;\n}\n\nconst DEFAULTS: AllocationOptions = {\n\tallocation: Allocation.UNIFORM,\n\tdomain: new Vector2(0, 1),\n\trange: new Vector2(0, 1),\n\tinverse: false,\n};\n\nexport class AllocationTransform extends Effect {\n\tstatic readonly FRAG = `\nuniform vec2 ${Uniforms.DOMAIN};\nuniform vec2 ${Uniforms.RANGE};\n\nvec3 remap(vec3 value, vec2 domain, vec2 range) {\n\treturn range.x + ( value - domain.x ) * ( range.y - range.x ) / ( domain.y - domain.x );\n}\n\nvoid mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {\n\n\tvec3 color = inputColor.rgb;\n\n\t#ifndef ${Defines.INVERSE}\n\n\t\t#if ${Defines.ALLOCATION} == ${Allocation.LG2}\n\n\t\t\tcolor = log2(color);\n\n\t\t#endif\n\n\t\tcolor = remap(color, domain, range);\n\t\tcolor.rgb = clamp(color.rgb, range.x, range.y);\n\n\t#else\n\n\t\tcolor = remap(color, range, domain);\n\n\t\t#if ${Defines.ALLOCATION} == ${Allocation.LG2}\n\n\t\t\tcolor.r = pow(2.0, color.r);\n\t\t\tcolor.g = pow(2.0, color.g);\n\t\t\tcolor.b = pow(2.0, color.b);\n\n\t\t#endif\n\n\t\tcolor.rgb = clamp(color.rgb, range.x, range.y);\n\n\t#endif\n\n\toutputColor = vec4(color, inputColor.a);\n\n}\n\t`.trim();\n\n\tconstructor(options = {} as Partial<AllocationOptions>) {\n\t\tconst _options = { ...DEFAULTS, ...options } as Required<AllocationOptions>;\n\t\tsuper('AllocationTransform', AllocationTransform.FRAG, {\n\t\t\tblendFunction: BlendFunction.SET,\n\t\t\tuniforms: new Map([\n\t\t\t\t[Uniforms.DOMAIN, new Uniform(_options.domain)],\n\t\t\t\t[Uniforms.RANGE, new Uniform(_options.range)],\n\t\t\t]),\n\t\t\tdefines: new Map([[Defines.ALLOCATION, _options.allocation.toFixed(0)]]),\n\t\t});\n\t\tif (_options.inverse) {\n\t\t\tthis.defines.set(Defines.INVERSE, '');\n\t\t}\n\t}\n}\n","import { BlendFunction, Effect } from 'postprocessing';\nimport { Uniform } from 'three';\nimport { DEFAULT_EXPOSURE, Uniforms } from '../constants';\n\nexport class ExposureTransform extends Effect {\n\tstatic readonly FRAG = `\nuniform float ${Uniforms.EXPOSURE};\n\nvoid mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {\n\n\toutputColor = vec4(inputColor.rgb * pow(2.0, ${Uniforms.EXPOSURE}), inputColor.a);\n\n}\n\t`.trim();\n\n\tconstructor(exposure = DEFAULT_EXPOSURE) {\n\t\tsuper('ExposureTransform', ExposureTransform.FRAG, {\n\t\t\tblendFunction: BlendFunction.SET,\n\t\t\tuniforms: new Map([[Uniforms.EXPOSURE, new Uniform(exposure)]]),\n\t\t});\n\t}\n\n\tget exposure(): number {\n\t\treturn this.uniforms.get(Uniforms.EXPOSURE)!.value;\n\t}\n\n\tset exposure(exposure: number) {\n\t\tthis.uniforms.get(Uniforms.EXPOSURE)!.value = exposure;\n\t}\n}\n","import { BlendFunction, Effect } from 'postprocessing';\nimport { Matrix4, Uniform } from 'three';\nimport { Uniforms } from '../constants';\n\nexport class MatrixTransform extends Effect {\n\tstatic readonly FRAG = `\nuniform mat4 ${Uniforms.MATRIX};\n\nvoid mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {\n\n\toutputColor = inputColor * ${Uniforms.MATRIX};\n\n}\n\t`.trim();\n\n\treadonly matrix: Matrix4;\n\n\tconstructor(matrix: Matrix4) {\n\t\tsuper('MatrixTransform', MatrixTransform.FRAG, {\n\t\t\tblendFunction: BlendFunction.SET,\n\t\t\tuniforms: new Map([[Uniforms.MATRIX, new Uniform(matrix)]]),\n\t\t});\n\t\tthis.matrix = matrix;\n\t}\n}\n","import { BlendFunction, Effect } from 'postprocessing';\n\nexport class DebugEffect extends Effect {\n\tstatic readonly FRAG = `\nvoid mainImage(const in vec4 inputColor, const in vec2 uv, out vec4 outputColor) {\n\n\tvec4 c = inputColor;\n\n\tif (isinf(c.r) || isinf(c.g) || isinf(c.b)) {\n\t\toutputColor.rgba = vec4(1., 0., 0., 1.);\n\t} else if (isnan(c.r) || isnan(c.g) || isnan(c.b)) {\n\t\toutputColor.rgba = vec4(0., 1., 0., 1.);\n\t} else {\n\t\toutputColor.rgba = vec4(0.5, 0.5, 0.5, 1.0);\n\t}\n\n}\n\t`.trim();\n\n\tconstructor() {\n\t\tsuper('DebugEffect', DebugEffect.FRAG, { blendFunction: BlendFunction.SET });\n\t}\n}\n","import { Camera, DataTexture, Data3DTexture, LinearEncoding, Matrix4, Vector2 } from 'three';\nimport {\n\tBlendFunction,\n\tEffect,\n\tEffectPass,\n\tLookupTexture,\n\tLUT1DEffect,\n\tLUT3DEffect,\n} from 'postprocessing';\nimport {\n\tView,\n\tDEFAULT_VIEW,\n\tAllocation,\n\tNEUTRAL_LUT_3D,\n\tNEUTRAL_LUT_1D,\n\t$TODO,\n\tFullscreenMaterial,\n} from './constants';\nimport { AllocationTransform, ExposureTransform, MatrixTransform } from './effects';\n\n// TODO(docs): API documentation.\nexport class FilmicPass extends EffectPass {\n\tprivate _view: View = DEFAULT_VIEW;\n\n\tprivate _filmicLUT: Data3DTexture | LookupTexture = NEUTRAL_LUT_3D;\n\tprivate _falseColorLUT: Data3DTexture | LookupTexture = NEUTRAL_LUT_3D;\n\tprivate _lookLUT: DataTexture = NEUTRAL_LUT_1D;\n\n\tprivate _prevEffects: Effect[];\n\n\tprivate _exposureTransform: ExposureTransform;\n\n\tconstructor(camera: Camera, ...effects: Effect[]) {\n\t\tsuper(camera, ...effects);\n\t\tthis._prevEffects = effects;\n\t\tthis._exposureTransform = new ExposureTransform();\n\t}\n\n\t/**************************************************************************\n\t * Configuration.\n\t */\n\n\tget view(): View {\n\t\treturn this._view;\n\t}\n\n\tset view(view: View) {\n\t\tthis._view = view;\n\t}\n\n\tget exposure(): number {\n\t\treturn this._exposureTransform.exposure;\n\t}\n\n\tset exposure(exposure: number) {\n\t\tthis._exposureTransform.exposure = exposure;\n\t}\n\n\t/**************************************************************************\n\t * LUTs.\n\t */\n\n\tget filmicLUT(): Data3DTexture | LookupTexture {\n\t\treturn this._filmicLUT;\n\t}\n\n\tset filmicLUT(lut: Data3DTexture | LookupTexture) {\n\t\tthis._filmicLUT = lut;\n\t}\n\n\tget falseColorLUT(): Data3DTexture | LookupTexture {\n\t\treturn this._falseColorLUT;\n\t}\n\n\tset falseColorLUT(lut: Data3DTexture | LookupTexture) {\n\t\tthis._falseColorLUT = lut;\n\t}\n\n\tget lookLUT(): DataTexture {\n\t\treturn this._lookLUT;\n\t}\n\n\tset lookLUT(lut: DataTexture) {\n\t\tthis._lookLUT = lut;\n\t}\n\n\t/**************************************************************************\n\t * Internal.\n\t */\n\n\t// TODO(cleanup): Do without a build method?\n\t// TODO(cleanup): Why does every effect have a blend function?\n\trecompile() {\n\t\t// Reset previous filmic transform.\n\t\tconst effects = [...this._prevEffects];\n\n\t\t// 1. Exposure.\n\t\teffects.push(this._exposureTransform);\n\n\t\tif (this._view !== View.NONE) {\n\t\t\t// 2. Scene Linear to Filmic Log\n\t\t\teffects.push(\n\t\t\t\tnew AllocationTransform({\n\t\t\t\t\tallocation: Allocation.LG2,\n\t\t\t\t\tdomain: new Vector2(-12.473931188, 12.526068812),\n\t\t\t\t}),\n\t\t\t\tnew LUT3DEffect(this.filmicLUT, {\n\t\t\t\t\tblendFunction: BlendFunction.SET,\n\t\t\t\t\tinputEncoding: LinearEncoding,\n\t\t\t\t} as $TODO),\n\t\t\t\tnew AllocationTransform({\n\t\t\t\t\tallocation: Allocation.UNIFORM,\n\t\t\t\t\tdomain: new Vector2(0, 0.66),\n\t\t\t\t})\n\t\t\t);\n\n\t\t\t// 3. Look Transform\n\t\t\tif (this._view === View.FILMIC || this._view === View.GRAYSCALE) {\n\t\t\t\teffects.push(\n\t\t\t\t\tnew LUT1DEffect(this._lookLUT, {\n\t\t\t\t\t\tblendFunction: BlendFunction.SET,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// 4. View Transform\n\t\t\tif (this._view === View.GRAYSCALE || this._view === View.FALSE_COLOR) {\n\t\t\t\teffects.push(\n\t\t\t\t\tnew MatrixTransform(\n\t\t\t\t\t\t// prettier-ignore\n\t\t\t\t\t\tnew Matrix4().fromArray([\n\t\t\t\t\t\t\t0.2126729, 0.7151521, 0.072175, 0,\n\t\t\t\t\t\t\t0.2126729, 0.7151521, 0.072175, 0,\n\t\t\t\t\t\t\t0.2126729, 0.7151521, 0.072175, 0,\n\t\t\t\t\t\t\t0, 0, 0, 1,\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (this._view === View.FALSE_COLOR) {\n\t\t\t\t// TODO(perf): Couldn't this be a 1D LUT?\n\t\t\t\teffects.push(\n\t\t\t\t\tnew LUT3DEffect(this._falseColorLUT, {\n\t\t\t\t\t\tblendFunction: BlendFunction.SET,\n\t\t\t\t\t\tinputEncoding: LinearEncoding,\n\t\t\t\t\t} as $TODO)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Look Transforms output to sRGB. When no Look is applied, include the\n\t\t// default output encoding.\n\t\t(this.fullscreenMaterial as FullscreenMaterial).encodeOutput = this._view === View.NONE;\n\n\t\tthis.setEffects(effects);\n\n\t\tsuper.recompile();\n\t}\n}\n"],"names":["View","Look","Allocation","DEFAULT_VIEW","FILMIC","DEFAULT_EXPOSURE","Defines","Uniforms","NEUTRAL_LUT_1D","DataTexture","Float32Array","RedFormat","FloatType","UVMapping","ClampToEdgeWrapping","LinearFilter","name","needsUpdate","NEUTRAL_LUT_3D","LookupTexture","createNeutral","DEFAULTS","allocation","UNIFORM","domain","Vector2","range","inverse","AllocationTransform","Effect","constructor","options","_options","FRAG","blendFunction","BlendFunction","SET","uniforms","Map","DOMAIN","Uniform","RANGE","defines","ALLOCATION","toFixed","set","INVERSE","LG2","trim","ExposureTransform","exposure","EXPOSURE","get","value","MatrixTransform","matrix","MATRIX","DebugEffect","FilmicPass","EffectPass","camera","effects","_view","_filmicLUT","_falseColorLUT","_lookLUT","_prevEffects","_exposureTransform","view","filmicLUT","lut","falseColorLUT","lookLUT","recompile","push","NONE","LUT3DEffect","inputEncoding","LinearEncoding","GRAYSCALE","LUT1DEffect","FALSE_COLOR","Matrix4","fromArray","fullscreenMaterial","encodeOutput","setEffects"],"mappings":";;;IAaYA,KAAZ;;AAAA,CAAA,UAAYA,IAAZ,EAAgB;AACfA,EAAAA,IAAA,CAAAA,IAAA,CAAA,MAAA,CAAA,GAAA,IAAA,CAAA,GAAA,MAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,QAAA,CAAA,GAAA,IAAA,CAAA,GAAA,QAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,YAAA,CAAA,GAAA,IAAA,CAAA,GAAA,YAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,aAAA,CAAA,GAAA,IAAA,CAAA,GAAA,aAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,WAAA,CAAA,GAAA,IAAA,CAAA,GAAA,WAAA,CAAA;AACA,CAND,EAAYA,IAAI,KAAJA,IAAI,GAMf,EANe,CAAhB,CAAA,CAAA;;IAQYC,KAAZ;;AAAA,CAAA,UAAYA,IAAZ,EAAgB;AACfA,EAAAA,IAAA,CAAAA,IAAA,CAAA,MAAA,CAAA,GAAA,IAAA,CAAA,GAAA,MAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,oBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,oBAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,eAAA,CAAA,GAAA,IAAA,CAAA,GAAA,eAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,sBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,sBAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,iBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,iBAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,qBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,qBAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,cAAA,CAAA,GAAA,IAAA,CAAA,GAAA,cAAA,CAAA;AACAA,EAAAA,IAAA,CAAAA,IAAA,CAAA,mBAAA,CAAA,GAAA,IAAA,CAAA,GAAA,mBAAA,CAAA;AACA,CATD,EAAYA,IAAI,KAAJA,IAAI,GASf,EATe,CAAhB,CAAA,CAAA;;AAWA,IAAYC,UAAZ,CAAA;;AAAA,CAAA,UAAYA,UAAZ,EAAsB;AACrBA,EAAAA,UAAA,CAAAA,UAAA,CAAA,SAAA,CAAA,GAAA,IAAA,CAAA,GAAA,SAAA,CAAA;AACAA,EAAAA,UAAA,CAAAA,UAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,GAAA,KAAA,CAAA;AACA,CAHD,EAAYA,UAAU,KAAVA,UAAU,GAGrB,EAHqB,CAAtB,CAAA,CAAA;;AAKO,MAAMC,YAAY,GAAGH,IAAI,CAACI,MAA1B,CAAA;AACA,MAAMC,gBAAgB,GAAG,CAAzB,CAAA;AAEP,IAAYC,OAAZ,CAAA;;AAAA,CAAA,UAAYA,OAAZ,EAAmB;AAClBA,EAAAA,OAAA,CAAA,YAAA,CAAA,GAAA,mBAAA,CAAA;AACAA,EAAAA,OAAA,CAAA,SAAA,CAAA,GAAA,gBAAA,CAAA;AACA,CAHD,EAAYA,OAAO,KAAPA,OAAO,GAGlB,EAHkB,CAAnB,CAAA,CAAA;;AAKA,IAAYC,QAAZ,CAAA;;AAAA,CAAA,UAAYA,QAAZ,EAAoB;AACnBA,EAAAA,QAAA,CAAA,UAAA,CAAA,GAAA,UAAA,CAAA;AACAA,EAAAA,QAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;AACAA,EAAAA,QAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA;AACAA,EAAAA,QAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;AACAA,EAAAA,QAAA,CAAA,OAAA,CAAA,GAAA,OAAA,CAAA;AACA,CAND,EAAYA,QAAQ,KAARA,QAAQ,GAMnB,EANmB,CAApB,CAAA,CAAA;;AAQO,MAAMC,cAAc,GAAG,IAAIC,WAAJ,CAC7B,IAAIC,YAAJ,CAAiB,CAAC,CAAD,EAAI,IAAJ,EAAU,GAAV,EAAe,IAAf,EAAqB,CAArB,CAAjB,CAD6B,EAE7B,CAF6B,EAG7B,CAH6B,EAI7BC,SAJ6B,EAK7BC,SAL6B,EAM7BC,SAN6B,EAO7BC,mBAP6B,EAQ7BA,mBAR6B,EAS7BC,YAT6B,EAU7BA,YAV6B,CAAvB,CAAA;AAYPP,cAAc,CAACQ,IAAf,GAAsB,WAAtB,CAAA;AACAR,cAAc,CAACS,WAAf,GAA6B,IAA7B,CAAA;AAEO,MAAMC,cAAc,GAAGC,aAAa,CAACC,aAAd,CAA4B,CAA5B,CAAvB,CAAA;AACPF,cAAc,CAACF,IAAf,GAAsB,WAAtB;;;;;;;;;;;;;;;;;;;;AC1DA,MAAMK,QAAQ,GAAsB;AACnCC,EAAAA,UAAU,EAAEpB,UAAU,CAACqB,OADY;AAEnCC,EAAAA,MAAM,EAAE,IAAIC,OAAJ,CAAY,CAAZ,EAAe,CAAf,CAF2B;AAGnCC,EAAAA,KAAK,EAAE,IAAID,OAAJ,CAAY,CAAZ,EAAe,CAAf,CAH4B;AAInCE,EAAAA,OAAO,EAAE,KAAA;AAJ0B,CAApC,CAAA;AAOM,MAAOC,mBAAP,SAAmCC,MAAnC,CAAyC;AA6C9CC,EAAAA,WAAA,CAAYC,UAAU,EAAtB,EAAsD;AACrD,IAAA,MAAMC,QAAQ,GAAA,QAAA,CAAA,EAAA,EAAQX,QAAR,EAAqBU,OAArB,CAAd,CAAA;;AACA,IAAA,KAAA,CAAM,qBAAN,EAA6BH,mBAAmB,CAACK,IAAjD,EAAuD;AACtDC,MAAAA,aAAa,EAAEC,aAAa,CAACC,GADyB;AAEtDC,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ,CACjB,CAAC/B,QAAQ,CAACgC,MAAV,EAAkB,IAAIC,OAAJ,CAAYR,QAAQ,CAACR,MAArB,CAAlB,CADiB,EAEjB,CAACjB,QAAQ,CAACkC,KAAV,EAAiB,IAAID,OAAJ,CAAYR,QAAQ,CAACN,KAArB,CAAjB,CAFiB,CAAR,CAF4C;AAMtDgB,MAAAA,OAAO,EAAE,IAAIJ,GAAJ,CAAQ,CAAC,CAAChC,OAAO,CAACqC,UAAT,EAAqBX,QAAQ,CAACV,UAAT,CAAoBsB,OAApB,CAA4B,CAA5B,CAArB,CAAD,CAAR,CAAA;AAN6C,KAAvD,CAAA,CAAA;;AAQA,IAAIZ,IAAAA,QAAQ,CAACL,OAAb,EAAsB;AACrB,MAAKe,IAAAA,CAAAA,OAAL,CAAaG,GAAb,CAAiBvC,OAAO,CAACwC,OAAzB,EAAkC,EAAlC,CAAA,CAAA;AACA,KAAA;AACD,GAAA;;AA1D6C,CAAA;AAAlClB,oBACIK,OAAO,CAAA;AACT,aAAA1B,EAAAA,QAAQ,CAACgC,MAAM,CAAA;AACf,aAAAhC,EAAAA,QAAQ,CAACkC,KAAK,CAAA;;;;;;;;;;AAUlB,SAAAnC,EAAAA,OAAO,CAACwC,OAAO,CAAA;;AAElB,MAAA,EAAAxC,OAAO,CAACqC,UAAiB,CAAAzC,IAAAA,EAAAA,UAAU,CAAC6C,GAAG,CAAA;;;;;;;;;;;;;AAavC,MAAA,EAAAzC,OAAO,CAACqC,UAAiB,CAAAzC,IAAAA,EAAAA,UAAU,CAAC6C,GAAG,CAAA;;;;;;;;;;;;;;;CA3BvB,CAAA,CA0CrBC,IA1CqB;;ACflB,MAAOC,iBAAP,SAAiCpB,MAAjC,CAAuC;AAW5CC,EAAAA,WAAY,CAAAoB,QAAQ,GAAG7C,gBAAX,EAA2B;AACtC,IAAA,KAAA,CAAM,mBAAN,EAA2B4C,iBAAiB,CAAChB,IAA7C,EAAmD;AAClDC,MAAAA,aAAa,EAAEC,aAAa,CAACC,GADqB;AAElDC,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ,CAAC,CAAC/B,QAAQ,CAAC4C,QAAV,EAAoB,IAAIX,OAAJ,CAAYU,QAAZ,CAApB,CAAD,CAAR,CAAA;AAFwC,KAAnD,CAAA,CAAA;AAIA,GAAA;;AAEW,EAAA,IAARA,QAAQ,GAAA;AACX,IAAO,OAAA,IAAA,CAAKb,QAAL,CAAce,GAAd,CAAkB7C,QAAQ,CAAC4C,QAA3B,CAAA,CAAsCE,KAA7C,CAAA;AACA,GAAA;;AAEW,EAARH,IAAAA,QAAQ,CAACA,QAAD,EAAiB;AAC5B,IAAKb,IAAAA,CAAAA,QAAL,CAAce,GAAd,CAAkB7C,QAAQ,CAAC4C,QAA3B,CAAA,CAAsCE,KAAtC,GAA8CH,QAA9C,CAAA;AACA,GAAA;;AAxB2C,CAAA;AAAhCD,kBACIhB,OAAO,CAAA;AACR,cAAA1B,EAAAA,QAAQ,CAAC4C,QAAQ,CAAA;;;;AAIe,8CAAA5C,EAAAA,QAAQ,CAAC4C,QAAQ,CAAA;;;CALzC,CAAA,CAQrBH,IARqB;;ACDlB,MAAOM,eAAP,SAA+BzB,MAA/B,CAAqC;AAa1CC,EAAAA,WAAA,CAAYyB,MAAZ,EAA2B;AAC1B,IAAA,KAAA,CAAM,iBAAN,EAAyBD,eAAe,CAACrB,IAAzC,EAA+C;AAC9CC,MAAAA,aAAa,EAAEC,aAAa,CAACC,GADiB;AAE9CC,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ,CAAC,CAAC/B,QAAQ,CAACiD,MAAV,EAAkB,IAAIhB,OAAJ,CAAYe,MAAZ,CAAlB,CAAD,CAAR,CAAA;AAFoC,KAA/C,CAAA,CAAA;AAD0B,IAAA,IAAA,CAFlBA,MAEkB,GAAA,KAAA,CAAA,CAAA;AAK1B,IAAKA,IAAAA,CAAAA,MAAL,GAAcA,MAAd,CAAA;AACA,GAAA;;AAnByC,CAAA;AAA9BD,gBACIrB,OAAO,CAAA;AACT,aAAA1B,EAAAA,QAAQ,CAACiD,MAAM,CAAA;;;;AAIA,4BAAAjD,EAAAA,QAAQ,CAACiD,MAAM,CAAA;;;CALrB,CAAA,CAQrBR,IARqB;;ACHlB,MAAOS,WAAP,SAA2B5B,MAA3B,CAAiC;AAiBtCC,EAAAA,WAAA,GAAA;AACC,IAAA,KAAA,CAAM,aAAN,EAAqB2B,WAAW,CAACxB,IAAjC,EAAuC;AAAEC,MAAAA,aAAa,EAAEC,aAAa,CAACC,GAAAA;AAA/B,KAAvC,CAAA,CAAA;AACA,GAAA;;AAnBqC,CAAA;AAA1BqB,YACIxB,OAAO,CAAA;;;;;;;;;;;;;;CAAA,CAAA,CAcrBe,IAdqB;;ACkBlB,MAAOU,UAAP,SAA0BC,UAA1B,CAAoC;AAWzC7B,EAAAA,WAAY,CAAA8B,MAAA,EAAgB,GAAGC,OAAnB,EAAoC;AAC/C,IAAMD,KAAAA,CAAAA,MAAN,EAAc,GAAGC,OAAjB,CAAA,CAAA;AAD+C,IAVxCC,IAAAA,CAAAA,KAUwC,GAV1B3D,YAU0B,CAAA;AAAA,IARxC4D,IAAAA,CAAAA,UAQwC,GARI7C,cAQJ,CAAA;AAAA,IAPxC8C,IAAAA,CAAAA,cAOwC,GAPQ9C,cAOR,CAAA;AAAA,IANxC+C,IAAAA,CAAAA,QAMwC,GANhBzD,cAMgB,CAAA;AAAA,IAAA,IAAA,CAJxC0D,YAIwC,GAAA,KAAA,CAAA,CAAA;AAAA,IAAA,IAAA,CAFxCC,kBAEwC,GAAA,KAAA,CAAA,CAAA;AAE/C,IAAKD,IAAAA,CAAAA,YAAL,GAAoBL,OAApB,CAAA;AACA,IAAA,IAAA,CAAKM,kBAAL,GAA0B,IAAIlB,iBAAJ,EAA1B,CAAA;AACA,GAAA;AAED;;AAEG;;;AAEK,EAAA,IAAJmB,IAAI,GAAA;AACP,IAAA,OAAO,KAAKN,KAAZ,CAAA;AACA,GAAA;;AAEO,EAAJM,IAAAA,IAAI,CAACA,IAAD,EAAW;AAClB,IAAKN,IAAAA,CAAAA,KAAL,GAAaM,IAAb,CAAA;AACA,GAAA;;AAEW,EAAA,IAARlB,QAAQ,GAAA;AACX,IAAO,OAAA,IAAA,CAAKiB,kBAAL,CAAwBjB,QAA/B,CAAA;AACA,GAAA;;AAEW,EAARA,IAAAA,QAAQ,CAACA,QAAD,EAAiB;AAC5B,IAAA,IAAA,CAAKiB,kBAAL,CAAwBjB,QAAxB,GAAmCA,QAAnC,CAAA;AACA,GAAA;AAED;;AAEG;;;AAEU,EAAA,IAATmB,SAAS,GAAA;AACZ,IAAA,OAAO,KAAKN,UAAZ,CAAA;AACA,GAAA;;AAEY,EAATM,IAAAA,SAAS,CAACC,GAAD,EAAmC;AAC/C,IAAKP,IAAAA,CAAAA,UAAL,GAAkBO,GAAlB,CAAA;AACA,GAAA;;AAEgB,EAAA,IAAbC,aAAa,GAAA;AAChB,IAAA,OAAO,KAAKP,cAAZ,CAAA;AACA,GAAA;;AAEgB,EAAbO,IAAAA,aAAa,CAACD,GAAD,EAAmC;AACnD,IAAKN,IAAAA,CAAAA,cAAL,GAAsBM,GAAtB,CAAA;AACA,GAAA;;AAEU,EAAA,IAAPE,OAAO,GAAA;AACV,IAAA,OAAO,KAAKP,QAAZ,CAAA;AACA,GAAA;;AAEU,EAAPO,IAAAA,OAAO,CAACF,GAAD,EAAiB;AAC3B,IAAKL,IAAAA,CAAAA,QAAL,GAAgBK,GAAhB,CAAA;AACA,GAAA;AAED;;AAEG;AAEH;AACA;;;AACAG,EAAAA,SAAS,GAAA;AACR;AACA,IAAMZ,MAAAA,OAAO,GAAG,CAAC,GAAG,KAAKK,YAAT,CAAhB,CAFQ;;AAKRL,IAAAA,OAAO,CAACa,IAAR,CAAa,KAAKP,kBAAlB,CAAA,CAAA;;AAEA,IAAA,IAAI,KAAKL,KAAL,KAAe9D,IAAI,CAAC2E,IAAxB,EAA8B;AAC7B;AACAd,MAAAA,OAAO,CAACa,IAAR,CACC,IAAI9C,mBAAJ,CAAwB;AACvBN,QAAAA,UAAU,EAAEpB,UAAU,CAAC6C,GADA;AAEvBvB,QAAAA,MAAM,EAAE,IAAIC,OAAJ,CAAY,CAAC,YAAb,EAA2B,YAA3B,CAAA;AAFe,OAAxB,CADD,EAKC,IAAImD,WAAJ,CAAgB,IAAA,CAAKP,SAArB,EAAgC;AAC/BnC,QAAAA,aAAa,EAAEC,aAAa,CAACC,GADE;AAE/ByC,QAAAA,aAAa,EAAEC,cAAAA;AAFgB,OAAhC,CALD,EASC,IAAIlD,mBAAJ,CAAwB;AACvBN,QAAAA,UAAU,EAAEpB,UAAU,CAACqB,OADA;AAEvBC,QAAAA,MAAM,EAAE,IAAIC,OAAJ,CAAY,CAAZ,EAAe,IAAf,CAAA;AAFe,OAAxB,CATD,EAF6B;;AAkB7B,MAAA,IAAI,IAAKqC,CAAAA,KAAL,KAAe9D,IAAI,CAACI,MAApB,IAA8B,IAAA,CAAK0D,KAAL,KAAe9D,IAAI,CAAC+E,SAAtD,EAAiE;AAChElB,QAAAA,OAAO,CAACa,IAAR,CACC,IAAIM,WAAJ,CAAgB,IAAKf,CAAAA,QAArB,EAA+B;AAC9B/B,UAAAA,aAAa,EAAEC,aAAa,CAACC,GAAAA;AADC,SAA/B,CADD,CAAA,CAAA;AAKA,OAxB4B;;;AA2B7B,MAAA,IAAI,IAAK0B,CAAAA,KAAL,KAAe9D,IAAI,CAAC+E,SAApB,IAAiC,IAAA,CAAKjB,KAAL,KAAe9D,IAAI,CAACiF,WAAzD,EAAsE;AACrEpB,QAAAA,OAAO,CAACa,IAAR,CACC,IAAIpB,eAAJ;AAEC,QAAA,IAAI4B,OAAJ,EAAcC,CAAAA,SAAd,CAAwB,CACvB,SADuB,EACZ,SADY,EACD,QADC,EACS,CADT,EAEvB,SAFuB,EAEZ,SAFY,EAED,QAFC,EAES,CAFT,EAGvB,SAHuB,EAGZ,SAHY,EAGD,QAHC,EAGS,CAHT,EAIvB,CAJuB,EAIpB,CAJoB,EAIjB,CAJiB,EAId,CAJc,CAAxB,CAFD,CADD,CAAA,CAAA;AAWA,OAAA;;AACD,MAAA,IAAI,KAAKrB,KAAL,KAAe9D,IAAI,CAACiF,WAAxB,EAAqC;AACpC;AACApB,QAAAA,OAAO,CAACa,IAAR,CACC,IAAIE,WAAJ,CAAgB,IAAKZ,CAAAA,cAArB,EAAqC;AACpC9B,UAAAA,aAAa,EAAEC,aAAa,CAACC,GADO;AAEpCyC,UAAAA,aAAa,EAAEC,cAAAA;AAFqB,SAArC,CADD,CAAA,CAAA;AAMA,OAAA;AACD,KAxDO;AA2DR;;;AACC,IAAKM,IAAAA,CAAAA,kBAAL,CAA+CC,YAA/C,GAA8D,KAAKvB,KAAL,KAAe9D,IAAI,CAAC2E,IAAlF,CAAA;AAED,IAAKW,IAAAA,CAAAA,UAAL,CAAgBzB,OAAhB,CAAA,CAAA;AAEA,IAAA,KAAA,CAAMY,SAAN,EAAA,CAAA;AACA,GAAA;;AAxIwC;;;;"}